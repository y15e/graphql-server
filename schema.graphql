interface Item {
  id: ID!
  date: String
}

type Gmail implements Item {
  id: ID!
  date: String
  labels: [String]
  from: String
  to: String
  subject: String
  mimeType: String
  body: String
}

type Issue implements Item {
  id: ID!
  date: String
  title: String
  detail: String
}

type Pagenation {
  from: Int
  to: Int
  total: Int
  hasNext: Boolean
  hasPrev: Boolean
}

type Items {
  items: [Item]!
  pagenation: Pagenation
}

type List {
  id: ID!
  name: String
  icon: String
  tabs: [String]
  fields: [Field]
}

type Field {
  id: ID!
  name: String
  type: String
}

type Filter {
  id: ID!
  list: String!
  name: String
  subject: String
  count: Int
}

input FilterInput {
  list: String!
  filter: String
  subject: String
  page: Int
}

type Query {
  lists: [List]!
  items(filter: FilterInput): Items
  item(id: String): Item
  filters(list_id: String): [Filter]
}

type Subscription {
  items(filter: FilterInput): Items
  item(id: String): Item
}

